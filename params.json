{
  "name": "Ugama-v2.0",
  "tagline": "C# MVC framework adapted for Unity3D projects.",
  "body": "# uGaMa\r\n\r\nC# MVC framework adapted for Unity3D projects.\r\n\r\n## \"uGaMa Scripts\" Window\r\nWindow > uGaMa Scripts\r\n\r\n![](http://i.imgur.com/PROoPz0.png)\r\n\r\n## Context Example\r\n\r\nContext is a GameObject and contains your GameObjects.\r\n\r\n![](http://i.imgur.com/GM6cFgf.png)\r\n\r\nCreate your Context Script and add component to your context gameobject\r\n\r\n![](http://i.imgur.com/FHtAY84.png)\r\n\r\n```\r\nusing UnityEngine;\r\nusing uGaMa.Context;\r\n\r\npublic class MainSceneContext : Context\r\n{\r\n    public override void Init()\r\n    {\r\n    }\r\n\r\n    public override void Bindings()\r\n    {\r\n    }\r\n\t\r\n    public override void UnBindings()\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nIf you want to specific ScriptExecutionOrder\r\n\r\nNote : Your order value must greater than -990 and smaller than 0 ( -990 < yourOrder < 0)\r\n\r\n```\r\nusing UnityEngine;\r\nusing uGaMa.Context;\r\n\r\n[ScriptOrder(-900)]\r\npublic class MainSceneContext : Context\r\n{\r\n}\r\n```\r\n\r\n## Model Example\r\n\r\nCreate your Model Interface\r\n\r\n```\r\nusing uGaMa.Model\r\n\r\npublic interface IGameModel : IModel\r\n{\r\n\t// your model variable\r\n    int scoreValue { get; set; }\r\n}\r\n```\r\n\r\nCreate your Model\r\n\r\n```\r\nusing uGaMa.Model\r\n\r\nclass GameModel : IGameModel\r\n{\r\n\tprivate int _scoreValue = 0;\r\n\t\r\n\tpublic int scoreValue\r\n    {\r\n        get { return _scoreValue; }\r\n        set { _scoreValue = value; }\r\n    }\r\n}\r\n```\r\n\r\nBind your model in your Context\r\n\r\n```\r\npublic class MainSceneContext : Context\r\n{\r\n\tpublic override void Bindings()\r\n\t{\r\n\t\tmodelMap.Bind<IGameModel>().To<GameModel>();\r\n\t}\r\n}\r\n```\r\n\r\nGet your model from commands or mediators\r\n\r\n```\r\n\r\nGameModel gameModel = uManager.GetModel<IGameModel>() as GameModel;\r\n\r\n```\r\n\r\n## Command Example\r\n\r\nCreate your command key\r\n\r\n```\r\npublic enum GameEvents\r\n{\r\n    UPDATE_SCORE\r\n    //Other keys\r\n}\r\n```\r\n\r\nExecute your command in other commands or mediators\r\n\r\n```\r\n// single Command\r\ndispatcher.Dispatch(GameEvents.UPDATE_SCORE);\r\n\r\n// use param\r\ndispatcher.Dispatch(GameEvents.UPDATE_SCORE, yourData);\r\n\r\n//use message\r\ndispatcher.Dispatch(GameEvents.UPDATE_SCORE, yourData, yourMessage);\r\n```\r\n\r\nBind your commands in your Context\r\n\r\n```\r\npublic class MainSceneContext : Context\r\n{\r\n\tpublic override void Bindings()\r\n\t{\r\n\t\tcommandMap.Bind(GameEvents.UPDATE_SCORE).To<UpdateScoreCMD>();\r\n\t}\r\n}\r\n```\r\n\r\nIf you want to Chain Commands\r\n\r\n```\r\npublic class MainSceneContext : Context\r\n{\r\n\tpublic override void Bindings()\r\n\t{\r\n\t\tcommandMap.Bind(GameEvents.YOUR_KEY).To<CMD1>().To<CMD2>();\r\n\t}\r\n}\r\n```\r\n\r\nCreate your Command\r\n\r\n```\r\npublic class UpdateScoreCMD : Command\r\n{\r\n    public override void Execute(NotifyParam notify)\r\n    {\r\n        YourData yourData = notify.data as YourData;\r\n\t\tYourMessage yourMessage = notify.msg as YourMessage;\r\n    }\r\n}\r\n```\r\n\r\n##Mediator Example\r\n\r\nCreate your View Script and add to a GameObject in hierarchy.\r\n\r\n```\r\npublic class YourView : View\r\n{\r\n\t\r\n}\r\n```\r\n\r\nCreate a Mediator Script \r\n\r\n```\r\n\r\npublic class YourViewMED : Mediator\r\n{\r\n    public override void OnRegister()\r\n    {\r\n    }\r\n\t\r\n    public override void OnRemove()\r\n    {\r\n    }\t\r\n}\r\n```\r\n\r\nBind your mediators in your Context\r\n\r\n```\r\npublic class MainSceneContext : Context\r\n{\r\n\tpublic override void Bindings()\r\n\t{\r\n\t\tmediatorMap.Bind<YourView>().To<YourViewMED>();\r\n\t}\r\n}\r\n```\r\n\r\nGet Mediator\r\n\r\n```\r\n\r\nYourViewMED mediator = uManager.GetMediator<YourView>() as YourViewMED;\r\n\r\n```\r\n\r\nHandle any of the commands in the mediators.\r\n\r\n```\r\npublic class YourViewMED : Mediator\r\n{\r\n    public override void OnRegister()\r\n    {\r\n\t\tAddListener(GameEvents.UPDATE_SCORE, UpdateScore);\r\n    }\r\n\t\r\n    private void UpdateScore(NotifyParam param)\r\n    {\r\n        \r\n    }\t\r\n}\r\n```\r\n\r\nRemove handle\r\n\r\n```\r\n\r\nRemoveListener(GameEvents.UPDATE_SCORE, UpdateScore);\r\n\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}